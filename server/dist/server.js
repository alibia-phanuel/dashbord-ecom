"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = __importDefault(require("dotenv"));
// Import du package dotenv pour charger les variables d'environnement
const database_1 = require("./config/database");
// Import de l'instance Sequelize configurÃ©e pour la base MySQL
const app_1 = __importDefault(require("./app"));
// Import de l'application Express dÃ©finie dans app.ts
dotenv_1.default.config();
// Chargement des variables d'environnement depuis le fichier .env
// ðŸ“¦ Import des modÃ¨les Sequelize
require("./models");
const PORT = process.env.PORT || 5000;
// RÃ©cupÃ©ration du port dans les variables d'environnement ou 5000 par dÃ©faut
// Test de la connexion Ã  la base MySQL avec Sequelize
database_1.sequelize
    .authenticate()
    .then(() => __awaiter(void 0, void 0, void 0, function* () {
    console.log("Connexion Ã  MySQL rÃ©ussie");
    // Synchronisation des modÃ¨les Sequelize avec la base (crÃ©ation/modification des tables)
    yield database_1.sequelize.sync({ alter: true });
    console.log("Base de donnÃ©es synchronisÃ©e");
    // DÃ©marrage du serveur Express sur le port dÃ©fini
    app_1.default.listen(PORT, () => {
        console.log(`ðŸš€ Serveur lancÃ© sur http://localhost:${PORT}`);
    });
}))
    .catch((error) => {
    // Gestion d'erreur si la connexion Ã  MySQL Ã©choue
    console.error("Erreur de connexion MySQL:", error);
});
